"use client"

import React, { useState, useEffect } from "react"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { copy } from "@/lib/copy"
import { icons } from "@/lib/icons"
import { useRouter } from "next/navigation"

interface Activity {
  id: string
  time: string
  title: string
  description: string
  duration: string
  cost: number
  currency: string
  distance?: string
  type: "transport" | "food" | "activity" | "accommodation"
  alternatives?: string[]
}

interface DayItinerary {
  day: number
  date: string
  activities: Activity[]
  totalCost: number
  weather: {
    condition: string
    temperature: number
    icon: string
  }
}

interface PlanningData {
  destination: string
  startDate: string
  endDate: string
  duration: number
  budget: number[]
  currency: string
  styles: string[]
  transport: string
  preferences: string[]
}

interface ResultData {
  itinerary: string
  metadata: {
    destination: string
    days: number
    budget: number
    travelStyle: string
    sources: any[]
    wordCount: number
    processingTime: number
  }
  planningData: PlanningData
}

export default function ResultadosPage() {
  const router = useRouter()
  const [selectedDay, setSelectedDay] = useState("1")
  const [isRefining, setIsRefining] = useState(false)
  const [refinementPrompt, setRefinementPrompt] = useState("")
  const [resultData, setResultData] = useState<ResultData | null>(null)
  const [itinerary, setItinerary] = useState<DayItinerary[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false)

  useEffect(() => {
    // Cargar los datos desde localStorage
    const savedResults = localStorage.getItem('itineraryResults')
    if (savedResults) {
      try {
        const parsedData = JSON.parse(savedResults)
        setResultData(parsedData)
        
        // Procesar el itinerario generado por la IA
        processItinerary(parsedData)
      } catch (error) {
        console.error('Error al procesar los resultados:', error)
      }
    } else {
      // Si no hay datos, redirigir a la página de planificación
      router.push('/app/plan')
    }
    setIsLoading(false)
  }, [router])

  // Función para procesar el itinerario generado por la IA
  const processItinerary = (data: ResultData) => {
    // En lugar de usar datos simulados, ahora procesamos el itinerario real
    // generado por la IA a partir de la búsqueda en tiempo real
    
    try {
      // Intentar parsear el itinerario si viene en formato JSON
      const parsedItinerary = JSON.parse(data.itinerary);
      setItinerary(parsedItinerary);
    } catch (error) {
      // Si no es JSON, intentamos extraer la información del texto
      console.log("El itinerario no está en formato JSON, procesando como texto");
      
      try {
        // Extraer días del itinerario usando expresiones regulares
        const dayRegex = /Día\s+(\d+):\s*([\s\S]*?)(?=Día\s+\d+:|$)/g;
        const dayMatches = [...data.itinerary.matchAll(dayRegex)];
        
        if (dayMatches.length > 0) {
          const processedItinerary: DayItinerary[] = dayMatches.map((match, index) => {
            const dayNumber = parseInt(match[1]);
            const dayContent = match[2];
            
            // Extraer actividades del día
            const activityRegex = /(\d{1,2}:\d{2})\s*-\s*(.*?)(?=\n\d{1,2}:\d{2}|$)/g;
            const activityMatches = [...dayContent.matchAll(activityRegex)];
            
            const activities: Activity[] = activityMatches.map((actMatch, actIndex) => {
              const time = actMatch[1];
              const activityContent = actMatch[2];
              
              // Extraer título y descripción
              const titleMatch = activityContent.match(/^(.*?)(?=\n|$)/);
              const title = titleMatch ? titleMatch[1].trim() : "Actividad";
              
              // Extraer descripción (todo después del título)
              const description = activityContent.replace(titleMatch?.[0] || "", "").trim();
              
              // Extraer costo si existe
              const costMatch = description.match(/(\d+(?:\.\d+)?)\s*(€|\$|USD|EUR)/);
              const cost = costMatch ? parseFloat(costMatch[1]) : 0;
              const currency = costMatch ? costMatch[2] : data.planningData.currency.toUpperCase();
              
              // Extraer duración si existe
              const durationMatch = description.match(/(\d+)\s*(min|h|hora|horas)/);
              const duration = durationMatch ? `${durationMatch[1]}${durationMatch[2] === "min" ? "min" : durationMatch[2] === "h" ? "h" : durationMatch[2]}` : "1h";
              
              // Determinar tipo de actividad
              let type: Activity["type"] = "activity";
              if (title.toLowerCase().includes("comida") || title.toLowerCase().includes("almuerzo") || title.toLowerCase().includes("cena") || title.toLowerCase().includes("restaurante")) {
                type = "food";
              } else if (title.toLowerCase().includes("hotel") || title.toLowerCase().includes("alojamiento") || title.toLowerCase().includes("check-in")) {
                type = "accommodation";
              } else if (title.toLowerCase().includes("vuelo") || title.toLowerCase().includes("traslado") || title.toLowerCase().includes("transporte") || title.toLowerCase().includes("metro") || title.toLowerCase().includes("bus")) {
                type = "transport";
              }
              
              return {
                id: `${dayNumber}-${actIndex + 1}`,
                time,
                title,
                description,
                duration,
                cost,
                currency,
                type,
              };
            });
            
            // Calcular costo total del día
            const totalCost = activities.reduce((sum, activity) => sum + activity.cost, 0);
            
            // Generar información del clima (simulada)
            const weatherConditions = ["Soleado", "Parcialmente nublado", "Nublado", "Lluvia ligera"];
            const weatherIcons = ["sun", "cloud", "cloud", "cloudRain"];
            const weatherIndex = Math.floor(Math.random() * weatherConditions.length);
            
            return {
              day: dayNumber,
              date: data.planningData.startDate || `2024-03-${15 + index}`,
              activities,
              totalCost,
              weather: {
                condition: weatherConditions[weatherIndex],
                temperature: 16 + Math.floor(Math.random() * 10),
                icon: weatherIcons[weatherIndex],
              },
            };
          });
          
          setItinerary(processedItinerary);
        } else {
          // Si no podemos procesar el texto, mostramos el itinerario como texto sin formato
          console.error("No se pudo procesar el itinerario");
          
          // Creamos un día con el itinerario en texto plano
          const plainTextDay: DayItinerary = {
            day: 1,
            date: data.planningData.startDate || "2024-03-15",
            activities: [{
              id: "1",
              time: "00:00",
              title: "Itinerario completo",
              description: data.itinerary,
              duration: "N/A",
              cost: 0,
              currency: data.planningData.currency.toUpperCase(),
              type: "activity",
            }],
            totalCost: 0,
            weather: {
              condition: "Soleado",
              temperature: 22,
              icon: "sun",
            },
          };
          
          setItinerary([plainTextDay]);
        }
      } catch (error) {
        console.error('Error al procesar el texto del itinerario:', error);
        
        // En caso de error, mostramos el itinerario como texto sin formato
        const plainTextDay: DayItinerary = {
          day: 1,
          date: data.planningData.startDate || "2024-03-15",
          activities: [{
            id: "1",
            time: "00:00",
            title: "Itinerario completo",
            description: data.itinerary,
            duration: "N/A",
            cost: 0,
            currency: data.planningData.currency.toUpperCase(),
            type: "activity",
          }],
          totalCost: 0,
          weather: {
            condition: "Soleado",
            temperature: 22,
            icon: "sun",
          },
        };
        
        setItinerary([plainTextDay]);
      }
    }
  }

  const totalBudget = itinerary.reduce((sum, day) => sum + day.totalCost, 0)

  const getActivityIcon = (type: Activity["type"]) => {
    switch (type) {
      case "transport":
        return icons.bus
      case "food":
        return icons.utensils
      case "activity":
        return icons.camera
      case "accommodation":
        return icons.building
      default:
        return icons.mapPin
    }
  }

  const getWeatherIcon = (condition: string) => {
    switch (condition) {
      case "sun":
        return icons.sun
      case "cloud":
        return icons.cloud
      case "cloudRain":
        return icons.cloudRain
      default:
        return icons.sun
    }
  }

  const handleRefine = async () => {
    setIsRefining(true)
    // Simulate API call
    await new Promise((resolve) => setTimeout(resolve, 2000))
    setIsRefining(false)
    setRefinementPrompt("")
  }

  const handleNewPlan = () => {
    router.push('/app/plan')
  }

  const handleDownloadPDF = async () => {
    if (!resultData) return;
    
    setIsGeneratingPDF(true);
    
    try {
      // Generar contenido markdown para el PDF
      let markdownContent = `# Itinerario para ${resultData.metadata.destination}\n\n`;
      markdownContent += `**Duración:** ${resultData.metadata.days} días\n`;
      markdownContent += `**Presupuesto:** ${resultData.metadata.budget} ${resultData.planningData.currency.toUpperCase()}\n`;
      markdownContent += `**Estilo de viaje:** ${resultData.metadata.travelStyle}\n\n`;
      
      // Añadir información de las fuentes
      if (resultData.metadata.sources && resultData.metadata.sources.length > 0) {
        markdownContent += `## Fuentes consultadas\n\n`;
        resultData.metadata.sources.forEach((source, index) => {
          markdownContent += `${index + 1}. [${source.title}](${source.url})\n`;
        });
        markdownContent += `\n`;
      }
      
      // Añadir el itinerario detallado
      markdownContent += `## Itinerario detallado\n\n`;
      
      itinerary.forEach(day => {
        markdownContent += `### Día ${day.day}: ${new Date(day.date).toLocaleDateString("es-ES", { weekday: "long", day: "numeric", month: "long" })}\n\n`;
        markdownContent += `**Clima:** ${day.weather.condition}, ${day.weather.temperature}°C\n`;
        markdownContent += `**Costo del día:** ${day.totalCost.toFixed(2)}${resultData.planningData.currency.toUpperCase()}\n\n`;
        
        day.activities.forEach(activity => {
          markdownContent += `#### ${activity.time} - ${activity.title}\n\n`;
          markdownContent += `**Descripción:** ${activity.description}\n\n`;
          markdownContent += `**Duración:** ${activity.duration}\n`;
          markdownContent += `**Costo:** ${activity.cost > 0 ? `${activity.cost}${activity.currency}` : "Gratis"}\n`;
          
          if (activity.distance) {
            markdownContent += `**Distancia:** ${activity.distance}\n`;
          }
          
          if (activity.alternatives && activity.alternatives.length > 0) {
            markdownContent += `**Alternativas:** ${activity.alternatives.join(", ")}\n`;
          }
          
          markdownContent += `\n`;
        });
        
        markdownContent += `\n---\n\n`;
      });
      
      // Añadir resumen de costos
      markdownContent += `## Resumen de costos\n\n`;
      markdownContent += `**Total del viaje:** ${totalBudget.toFixed(2)}${resultData.planningData.currency.toUpperCase()}\n\n`;
      
      // Añadir pie de página
      markdownContent += `\n---\n\n`;
      markdownContent += `*Generado por ViajeSmart con inteligencia artificial*`;
      markdownContent += `\n*Fecha de generación: ${new Date().toLocaleDateString("es-ES")}*`;
      
      // Crear un Blob con el contenido markdown
      const blob = new Blob([markdownContent], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      
      // Crear un enlace temporal para descargar el archivo
      const a = document.createElement('a');
      a.href = url;
      a.download = `itinerario-${resultData.metadata.destination.replace(/\s+/g, '-')}.md`;
      document.body.appendChild(a);
      a.click();
      
      // Limpiar
      setTimeout(() => {
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }, 100);
      
      // Mostrar mensaje de éxito
      alert('Itinerario descargado con éxito en formato Markdown (.md)');
    } catch (error) {
      console.error('Error al generar el PDF:', error);
      alert('Error al generar el itinerario. Por favor, inténtalo de nuevo.');
    } finally {
      setIsGeneratingPDF(false);
    }
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <icons.loading className="h-8 w-8 animate-spin mx-auto mb-4" />
          <p>Cargando tu itinerario...</p>
        </div>
      </div>
    )
  }

  if (!resultData) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">No se encontraron resultados</h1>
          <Button onClick={handleNewPlan} className="bg-cta hover:bg-cta-hover text-cta-foreground rounded-xl">
            Crear nuevo plan
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="p-4 lg:p-6 space-y-6">
      {/* Header with summary */}
      <div className="space-y-4">
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div>
            <h1 className="text-3xl font-bold">Tu itinerario para {resultData.metadata.destination}</h1>
            <p className="text-muted-foreground">
              {resultData.planningData.startDate} - {resultData.planningData.endDate} • {resultData.metadata.days} días
            </p>
          </div>
          <div className="flex flex-wrap gap-2">
            {resultData.planningData.styles.map((style, index) => (
              <Badge key={index} variant="secondary" className="rounded-full">
                {style}
              </Badge>
            ))}
          </div>
        </div>

        {/* Summary cards */}
        <div className="grid sm:grid-cols-3 gap-4">
          <Card className="rounded-2xl border-0 shadow-lg">
            <CardContent className="pt-6">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-primary/10 rounded-xl flex items-center justify-center">
                  <icons.wallet className="w-5 h-5 text-primary" />
                </div>
                <div>
                  <p className="text-2xl font-bold">
                    {totalBudget.toFixed(2)}{resultData.planningData.currency.toUpperCase()}
                  </p>
                  <p className="text-sm text-muted-foreground">Presupuesto total</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="rounded-2xl border-0 shadow-lg">
            <CardContent className="pt-6">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-primary/10 rounded-xl flex items-center justify-center">
                  <icons.mapPin className="w-5 h-5 text-primary" />
                </div>
                <div>
                  <p className="text-2xl font-bold">
                    {itinerary.reduce((sum, day) => sum + day.activities.length, 0)}
                  </p>
                  <p className="text-sm text-muted-foreground">Actividades</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="rounded-2xl border-0 shadow-lg">
            <CardContent className="pt-6">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-primary/10 rounded-xl flex items-center justify-center">
                  <icons.route className="w-5 h-5 text-primary" />
                </div>
                <div>
                  <p className="text-2xl font-bold">
                    {Math.floor(Math.random() * 20) + 5} km
                  </p>
                  <p className="text-sm text-muted-foreground">Distancia total</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      <div className="grid lg:grid-cols-4 gap-6">
        {/* Main itinerary */}
        <div className="lg:col-span-3">
          <Card className="rounded-2xl shadow-lg border-0">
            <CardHeader>
              <CardTitle>Itinerario detallado</CardTitle>
              <CardDescription>Actividades organizadas por día con horarios y costos</CardDescription>
            </CardHeader>
            <CardContent>
              <Tabs value={selectedDay} onValueChange={setSelectedDay}>
                <TabsList className="grid w-full grid-cols-3 rounded-xl">
                  {itinerary.map((day) => (
                    <TabsTrigger key={day.day} value={day.day.toString()} className="rounded-lg">
                      Día {day.day}
                    </TabsTrigger>
                  ))}
                </TabsList>

                {itinerary.map((day) => (
                  <TabsContent key={day.day} value={day.day.toString()} className="mt-6">
                    <div className="space-y-4">
                      {/* Day header */}
                      <div className="flex items-center justify-between">
                        <div>
                          <h3 className="text-lg font-semibold">
                            {new Date(day.date).toLocaleDateString("es-ES", {
                              weekday: "long",
                              day: "numeric",
                              month: "long",
                            })}
                          </h3>
                          <p className="text-sm text-muted-foreground">
                            Total: {day.totalCost.toFixed(2)}{resultData.planningData.currency.toUpperCase()}
                          </p>
                        </div>
                        <div className="flex items-center gap-2">
                          {React.createElement(getWeatherIcon(day.weather.icon), {
                            className: "w-5 h-5 text-amber-500",
                          })}
                          <span className="text-sm">{day.weather.temperature}°C</span>
                          <Badge variant="outline" className="rounded-full">
                            {day.weather.condition}
                          </Badge>
                        </div>
                      </div>

                      {/* Timeline */}
                      <div className="space-y-4">
                        {day.activities.map((activity, index) => {
                          const Icon = getActivityIcon(activity.type)
                          const isLast = index === day.activities.length - 1

                          return (
                            <div key={activity.id} className="flex gap-4">
                              {/* Timeline line */}
                              <div className="flex flex-col items-center">
                                <div className="w-10 h-10 bg-primary/10 rounded-xl flex items-center justify-center">
                                  <Icon className="w-4 h-4 text-primary" />
                                </div>
                                {!isLast && <div className="w-px h-8 bg-border mt-2" />}
                              </div>

                              {/* Activity content */}
                              <div className="flex-1 pb-4">
                                <div className="flex items-start justify-between">
                                  <div className="space-y-1">
                                    <div className="flex items-center gap-2">
                                      <span className="text-sm font-medium text-primary">{activity.time}</span>
                                      <Badge variant="outline" className="text-xs">
                                        {activity.duration}
                                      </Badge>
                                      {activity.distance && (
                                        <Badge variant="outline" className="text-xs">
                                          {activity.distance}
                                        </Badge>
                                      )}
                                    </div>
                                    <h4 className="font-semibold">{activity.title}</h4>
                                    <p className="text-sm text-muted-foreground">{activity.description}</p>
                                    {activity.alternatives && activity.alternatives.length > 0 && (
                                      <div className="flex flex-wrap gap-1 mt-2">
                                        <span className="text-xs text-muted-foreground">Alternativas:</span>
                                        {activity.alternatives.map((alt, i) => (
                                          <Button
                                            key={i}
                                            variant="ghost"
                                            size="sm"
                                            className="h-6 px-2 text-xs rounded-full"
                                          >
                                            {alt}
                                          </Button>
                                        ))}
                                      </div>
                                    )}
                                  </div>
                                  <div className="text-right">
                                    <p className="font-semibold">
                                      {activity.cost > 0 ? `${activity.cost}${resultData.planningData.currency.toUpperCase()}` : "Gratis"}
                                    </p>
                                    <Button variant="ghost" size="sm" className="text-xs">
                                      {copy.buttons.viewOnMap}
                                    </Button>
                                  </div>
                                </div>
                              </div>
                            </div>
                          )
                        })}
                      </div>
                    </div>
                  </TabsContent>
                ))}
              </Tabs>
            </CardContent>
          </Card>
        </div>

        {/* Right sidebar */}
        <div className="space-y-4">
          {/* Weather widget */}
          <Card className="rounded-2xl shadow-lg border-0">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <icons.sun className="h-4 w-4 text-primary" />
                Clima por día
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {itinerary.map((day) => {
                const WeatherIcon = getWeatherIcon(day.weather.icon)
                return (
                  <div key={day.day} className="flex items-center justify-between">
                    <span className="text-sm">Día {day.day}</span>
                    <div className="flex items-center gap-2">
                      <WeatherIcon className="h-4 w-4 text-amber-500" />
                      <span className="text-sm">{day.weather.temperature}°C</span>
                      <Badge variant="outline" className="text-xs">
                        {day.weather.condition}
                      </Badge>
                    </div>
                  </div>
                )
              })}
            </CardContent>
          </Card>

          {/* Currency converter */}
          <Card className="rounded-2xl shadow-lg border-0">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <icons.dollarSign className="h-4 w-4 text-primary" />
                Conversión rápida
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="text-center p-3 bg-muted rounded-xl">
                <p className="text-sm text-muted-foreground">Total en {resultData.planningData.currency.toUpperCase()}</p>
                <p className="text-2xl font-bold">
                  {totalBudget.toFixed(2)}{resultData.planningData.currency.toUpperCase()}
                </p>
              </div>
              <div className="text-center p-3 bg-muted rounded-xl">
                <p className="text-sm text-muted-foreground">Equivalente en USD</p>
                <p className="text-2xl font-bold">
                  ${(totalBudget * 1.08).toFixed(2)}
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Alerts */}
          <Card className="rounded-2xl shadow-lg border-0">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <icons.alertCircle className="h-4 w-4 text-primary" />
                Alertas
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="p-3 bg-amber-50 border border-amber-200 rounded-xl">
                <p className="text-sm text-amber-800">{copy.info.weatherAlert}</p>
              </div>
              <div className="p-3 bg-blue-50 border border-blue-200 rounded-xl">
                <p className="text-sm text-blue-800">{copy.info.transportDelay}</p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Action buttons */}
      <div className="flex flex-wrap gap-4 justify-center">
        <Sheet>
          <SheetTrigger asChild>
            <Button className="bg-cta hover:bg-cta-hover text-cta-foreground rounded-xl">
              <icons.sliders className="mr-2 h-4 w-4" />
              {copy.buttons.refineWithAI}
            </Button>
          </SheetTrigger>
          <SheetContent className="w-full sm:max-w-md">
            <SheetHeader>
              <SheetTitle>Refinar itinerario con IA</SheetTitle>
              <SheetDescription>
                Describe los cambios que te gustaría hacer y la IA ajustará tu itinerario
              </SheetDescription>
            </SheetHeader>
            <div className="space-y-4 mt-6">
              <div className="space-y-2">
                <Label htmlFor="refinement">¿Qué te gustaría cambiar?</Label>
                <Textarea
                  id="refinement"
                  placeholder="Ej: Agrega más actividades gastronómicas, reduce el presupuesto, evita caminar mucho..."
                  value={refinementPrompt}
                  onChange={(e) => setRefinementPrompt(e.target.value)}
                  className="rounded-xl"
                  rows={4}
                />
              </div>
              <div className="space-y-2">
                <p className="text-sm font-medium">Sugerencias rápidas:</p>
                <div className="flex flex-wrap gap-2">
                  {[
                    "Ajusta para presupuesto bajo",
                    "Agrega más gastronomía",
                    "Menos caminata",
                    "Más actividades culturales",
                  ].map((suggestion) => (
                    <Button
                      key={suggestion}
                      variant="outline"
                      size="sm"
                      className="text-xs rounded-full bg-transparent"
                      onClick={() => setRefinementPrompt(suggestion)}
                    >
                      {suggestion}
                    </Button>
                  ))}
                </div>
              </div>
              <Button
                onClick={handleRefine}
                disabled={isRefining || !refinementPrompt.trim()}
                className="w-full bg-cta hover:bg-cta-hover text-cta-foreground rounded-xl"
              >
                {isRefining ? (
                  <>
                    <icons.loading className="mr-2 h-4 w-4 animate-spin" />
                    Refinando...
                  </>
                ) : (
                  "Refinar itinerario"
                )}
              </Button>
            </div>
          </SheetContent>
        </Sheet>

        <Button 
          onClick={handleDownloadPDF} 
          disabled={isGeneratingPDF}
          className="bg-cta hover:bg-cta-hover text-cta-foreground rounded-xl"
        >
          {isGeneratingPDF ? (
            <>
              <icons.loading className="mr-2 h-4 w-4 animate-spin" />
              Generando PDF...
            </>
          ) : (
            <>
              <icons.download className="mr-2 h-4 w-4" />
              Descargar PDF
            </>
          )}
        </Button>

        <Button variant="outline" className="rounded-xl bg-transparent">
          <icons.save className="mr-2 h-4 w-4" />
          {copy.buttons.save}
        </Button>

        <Button onClick={handleNewPlan} className="bg-cta hover:bg-cta-hover text-cta-foreground rounded-xl">
          <icons.plus className="mr-2 h-4 w-4" />
          Nuevo plan
        </Button>
      </div>
    </div>
  )
}